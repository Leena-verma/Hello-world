import re

# Expanded flexibility in regex to accommodate different formats
def extract_vendor_details(description, keywords):
    if pd.isna(description):
        return "", ""
    description = str(description)

    # Adjusted regex: broader match criteria, more flexible with spaces and different delimiters
    pattern = re.compile(r'(\b\w+\b)\s*[-—]\s*(' + '|'.join(re.escape(keyword) for keyword in keywords) + r')\s*[-—]\s*(\b\w+\b)', re.IGNORECASE)

    match = pattern.search(description)
    if match:
        return match.group(1) + " " + match.group(2) + " " + match.group(3), match.group(2)
    return "", ""

# Test with a list of keywords and a sample description
test_keywords = ['Toronto', 'Montreal']
description = "This is a test - Toronto - Fee"
description2 = "Training event - Montreal - Certification"

# Applying test
print(extract_vendor_details(description, test_keywords))
print(extract_vendor_details(description2, test_keywords))



import re

def extract_vendor_details(description, keywords):
    if pd.isna(description):
        return ""
    description = str(description)

    # Adjusted regex: Captures entire segment within hyphens containing the keyword
    pattern = re.compile(r'-([^-\n]*(' + '|'.join(re.escape(keyword) for keyword in keywords) + r')[^-\n]*)-', re.IGNORECASE)

    match = pattern.search(description)
    if match:
        return match.group(1).strip()  # Returns the matched group, stripping any excess whitespace
    return ""

# Example usage
test_keywords = ['Toronto', 'Montreal']
description = "This is a test - fee for Toronto something - more text"
description2 = "Event details - certification in Montreal example - end part"

# Applying test
print(extract_vendor_details(description, test_keywords))
print(extract_
vendor_details(description2, test_keywords))



def extract_vendor_details(description, keywords):
    if pd.isna(description) or not description:
        print("Returning empty for:", description)  # Debug print
        return "", ""
    description = str(description)

    pattern = re.compile(r'-([^-\n]*(' + '|'.join(re.escape(keyword) for keyword in keywords) + r')[^-\n]*)-', re.IGNORECASE)
    match = pattern.search(description)
    if match:
        result = (match.group(1).strip(), match.group(2).strip())
        print("Match found:", result)  # Debug print
        return result
    else:
        print("No match found, returning empty for:", description)  # Debug print
        return "", ""




import re

# Define keywords, including 'renewal' as you specified
keywords = ['IIROC', 'CISSP', 'renewal', 'Canadian']  # Example keywords

# Compile regex with case insensitivity, capturing only the keyword and the word following it
pattern = re.compile(
    r'\b(' + '|'.join(re.escape(keyword) for keyword in keywords) + r')\s+(\w+)', 
    re.IGNORECASE  # This flag makes the search case-insensitive
)

# Test strings to demonstrate the functionality
test_strings = [
    "TAE0103 - IIROC licensing",
    "COSBYM2 - CISSP membership dues",
    "3NB renewal apps - new process",
    "details about canadian standards"
]

# Use the regex pattern to search within each test string
for test in test_strings:
    match = pattern.search(test)
    if match:
        print("Match found:", match.groups())  # Outputs the keyword and the word immediately following it
    else:
        print("No match found for:", test)


import re

# Define the keywords
keywords = ['IIROC', 'CISSP']

# Compile the regex pattern, ensuring it's aimed to search for the keywords and any following text, up to a hyphen or the end of the line
pattern = re.compile(r'-\s*([^-\n]*(' + '|'.join(re.escape(keyword) for keyword in keywords) + r')\s+[^-\n]*)')

# Test strings that resemble your actual data
test_strings = [
    "TAE0103 - IIROC licensing",
    "COSBYM2 - CISSP membership dues"
]

# Use the regex pattern to search within each test string
for test in test_strings:
    match = pattern.search(test)  # Use search(), not match()
    if match:
        print("Match found:", match.group(1))  # Outputs the entire content after the hyphen that contains the keyword
    else:
        print("No match found for:", test)






